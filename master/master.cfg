# -*- python -*-

from buildbot.plugins import changes, schedulers, steps, util, worker


# BuildmasterConfig is read by Buildbot.
conf = BuildmasterConfig = {}


# Define worker and connection information.
workerNames = ["worker_{}".format(zI) for zI in range(1, 3)]
passes = ["pass_{}".format(zI) for zI in range(1, 3)]
slaves = [worker.Worker(workerNames[zJ], passes[zJ]) for zJ in range(2)]
slavePort = 9990

# Define Git repository poller, which polls for changes on some branches.
thisRepoName = "buildbot-lets-explore"
thisRepoURL = "git://github.com/mvousden/{}".format(thisRepoName)
skipBranches = ["the-buildbot"]

def shouldSkip(branchCheck):
    if branchCheck == "HEAD":
        return False
    for branch in skipBranches:
        if branch == branchCheck.split("/")[-1]:
            return False
    return True

sourceChange = changes.GitPoller(thisRepoURL,
                                 branches=shouldSkip,
                                 project=thisRepoName,
                                 workdir="gitpoller",
                                 pollinterval=30)

# Define operations to be conduced by the workers.
checkout = steps.Git(repourl=thisRepoURL,
                     haltOnFailure=True)

runTests = steps.ShellCommand(name="pytest",
                              command=["py.test"],
                              haltOnFailure=True)

buildPackageOps = []
for name in "first", "second", "third":
    buildPackageOps.append(steps.ShellCommand(
        name="build {} package".format(name), command=["make", name],
        haltOnFailure=True))

# Create build factories from operations, one for running tests, and one for
# performing builds.
testFactory = util.BuildFactory()
testFactory.addSteps([checkout, runTests])

buildFactory = util.BuildFactory()
buildFactory.addSteps([checkout] + buildPackageOps)

# Create builders from the build factories, which use slave workers to complete
# tasks from the factories.
masterTestBuilder = util.BuilderConfig(name="master-test", factory=testFactory,
                        workernames=[slaves[zI].name for zI in range(2)])

masterBuildBuilder = util.BuilderConfig(name="master-build",
                         factory=buildFactory,
                         workernames=[slaves[zI].name for zI in range(2)])

devTestBuilder = util.BuilderConfig(name="development-test",
                     factory=testFactory,
                     workernames=[slaves[zI].name for zI in range(2)])

devBuildBuilder = util.BuilderConfig(name="development-build",
                      factory=buildFactory,
                      workernames=[slaves[zI].name for zI in range(2)])

featTestBuilder = util.BuilderConfig(name="feature-test",
                      factory=testFactory,
                      workernames=[slaves[zI].name for zI in range(2)])

featBuildBuilder = util.BuilderConfig(name="feature-build",
                       factory=buildFactory,
                       workernames=[slaves[zI].name for zI in range(2)])

# This expression matches anything except 'example-master' and
# 'example-development'. Used for schedulers.
masterBranch = "example-master"
devBranch = "example-development"
otherBranch = lambda branch: branch not in [masterBranch, devBranch]

# Create schedulers. The commented schedulers allow builds to be triggered from
# the web interface. The first uncommented scheduler triggers tests from a
# change in the maserBranch of the source. The next scheduler triggers the
# build if the tests are successful. The schedulers after that follow the same
# pattern.

# forceTestScheduler = schedulers.ForceScheduler(name="manual-test",
#                          builderNames=[str(testBuilder.name)])
# forceBuildScheduler = schedulers.ForceScheduler(name="manual-build",
#                          builderNames=[str(buildBuilder.name)])

masterTestScheduler = schedulers.SingleBranchScheduler(
                          name="test-master-from-polling",
                          change_filter=util.ChangeFilter(
                              project=thisRepoName,
                              branch=masterBranch),
                          builderNames=[str(masterTestBuilder.name)])

masterBuildScheduler = schedulers.Dependent(name="build-master-after-test",
                            upstream=masterTestScheduler,
                            builderNames=[str(masterBuildBuilder.name)])

devTestScheduler = schedulers.SingleBranchScheduler(
                       name="test-development-from-polling",
                       change_filter=util.ChangeFilter(
                           project=thisRepoName,
                           branch=devBranch),
                       builderNames=[str(devTestBuilder.name)])

devBuildScheduler = schedulers.Dependent(name="build-development-after-test",
                        upstream=devTestScheduler,
                        builderNames=[str(devBuildBuilder.name)])

featTestScheduler = schedulers.SingleBranchScheduler(
                        name="test-feature-from-polling",
                        change_filter=util.ChangeFilter(
                            project=thisRepoName,
                            branch_fn=otherBranch),
                        builderNames=[str(featTestBuilder.name)])

featBuildScheduler = schedulers.Dependent(name="build-feature-after-test",
                         upstream=featTestScheduler,
                         builderNames=[str(featBuildBuilder.name)])

# Add resources to the configuration dictionary.
conf["builders"] = [masterTestBuilder, masterBuildBuilder,
                    devTestBuilder, devBuildBuilder,
                    featTestBuilder, featBuildBuilder]

conf["workers"] = slaves
conf["protocols"] = {"pb": {"port": slavePort}}
conf["change_source"] = [sourceChange]
# conf["schedulers"] = [forceTestScheduler, forceBuildScheduler,
#                       branchTestScheduler, buildTriggerScheduler]
conf["schedulers"] = [masterTestScheduler, masterBuildScheduler,
                      devTestScheduler, devBuildScheduler,
                      featTestScheduler, featBuildScheduler]

# Some master configuration for the GUI.
masterPort = 8010
conf["title"] = "Let's explore Buildbot!"
conf["buildbotURL"] = "http://localhost:{}/".format(masterPort)
conf["www"] = dict(port=masterPort,
                   plugins={"waterfall_view": {}, "console_view": {}})
conf["db"] = {"db_url": "sqlite:///state.sqlite"}
