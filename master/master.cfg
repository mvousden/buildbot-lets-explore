# -*- python -*-

from buildbot.plugins import changes, schedulers, steps, util, worker


# BuildmasterConfig is read by Buildbot.
conf = BuildmasterConfig = {}


# Define worker and connection information.
workerNames = ["worker_{}".format(zI) for zI in range(1, 3)]
passes = ["pass_{}".format(zI) for zI in range(1, 3)]
slaves = [worker.Worker(workerNames[zJ], passes[zJ]) for zJ in range(2)]
slavePort = 9989

# Define triggers for operations (build and test). Will poll the repository for
# changes on the branch.
thisRepoURL = "git://github.com/mvousden/buildbot-lets-explore"
repoBranch = "example-master"
sourceChange = changes.GitPoller(thisRepoURL,
                                 branch=repoBranch,
                                 workdir="gitpoller",
                                 pollinterval=300)

# Define operations to be conduced by the workers.
checkout = steps.Git(repourl=thisRepoURL,
                     branch=repoBranch,
                     haltOnFailure=True)

runTests = steps.ShellCommand(name="pytest",
                              command=["py.test"],
                              haltOnFailure=True)

buildPackageOps = []
for name in "first", "second", "third":
    buildPackageOps.append(steps.ShellCommand(
        name="build {} package".format(name), command=["make", name],
        haltOnFailure=True))

# Create build factories from operations, one for running tests, and one for
# performing builds.
testFactory = util.BuildFactory()
testFactory.addSteps([checkout, runTests])

buildFactory = util.BuildFactory()
buildFactory.addSteps([checkout] + buildPackageOps)

# Create builders from the build factories, which use slave workers to complete
# tasks from the factories.
testBuilder = util.BuilderConfig(name="test", factory=testFactory,
                  workernames=[slaves[zI].name for zI in range(2)])

buildBuilder = util.BuilderConfig(name="build", factory=buildFactory,
                   workernames=[slaves[zI].name for zI in range(2)])

# Create schedulers. First two allows builds to be triggered from the web
# interface. Second two track changes to source using sourceChange.
forceTestScheduler = schedulers.ForceScheduler(name="manual-test",
                         builderNames=[str(testBuilder.name)])
forceBuildScheduler = schedulers.ForceScheduler(name="manual-build",
                         builderNames=[str(buildBuilder.name)])

branchTestScheduler = schedulers.SingleBranchScheduler(
                          name="test-from-polling",
                          change_filter=util.ChangeFilter(
                              branch=repoBranch),
                          builderNames=[str(testBuilder.name)])

branchBuildScheduler = schedulers.SingleBranchScheduler(
                           name="build-from-polling",
                           change_filter=util.ChangeFilter(
                               branch=repoBranch),
                           builderNames=[str(buildBuilder.name)])

# Add resources to the configuration dictionary.
conf["builders"] = [testBuilder, buildBuilder]
conf["workers"] = slaves
conf["protocols"] = {"pb": {"port": slavePort}}
conf["change_source"] = [sourceChange]
conf["schedulers"] = [forceTestScheduler, forceBuildScheduler,
                      branchTestScheduler, branchBuildScheduler]

# Some master configuration for the GUI.
masterPort = 8010
conf["title"] = "Let's explore Buildbot!"
conf["buildbotURL"] = "http://localhost:{}/".format(masterPort)
conf["www"] = dict(port=masterPort,
                   plugins={"waterfall_view": {}, "console_view": {}})
conf["db"] = {"db_url": "sqlite:///state.sqlite"}
